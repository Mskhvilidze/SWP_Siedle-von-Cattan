package de.uol.swp.client.register;

import com.google.common.eventbus.EventBus;
import com.google.inject.Inject;
import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXPasswordField;
import com.jfoenix.controls.JFXTextField;
import com.jfoenix.controls.base.IFXLabelFloatControl;
import de.uol.swp.client.AbstractPresenter;
import de.uol.swp.client.profile.ProfilePresenter;
import de.uol.swp.client.profile.validator.ValidatorHelper;
import de.uol.swp.client.register.event.RegistrationCanceledEvent;
import de.uol.swp.common.game.dto.UserDTO;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.TextInputControl;
import javafx.scene.layout.AnchorPane;

/**
 * Manages the registration window
 *
 * @author Marco Grawunder
 * @see de.uol.swp.client.AbstractPresenter
 * @since 2019-08-29
 */
public class RegistrationPresenter extends AbstractPresenter {

    public static final String FXML = "/fxml/RegistrationView.fxml";

    private static final RegistrationCanceledEvent REGISTRATION_CANCELED_EVENT = new RegistrationCanceledEvent();
    @FXML
    private AnchorPane root;

    @FXML
    private JFXTextField emailField;
    @FXML
    private JFXTextField nameField;
    @FXML
    private JFXPasswordField passwordField;
    @FXML
    private JFXPasswordField confirmPasswordField;
    @FXML
    private JFXButton registerButton;

    /**
     * Constructor
     *
     * @param eventBus the EventBus set in ClientModule
     * @see de.uol.swp.client.di.ClientModule
     * @since 2019-09-18
     */
    @Inject
    public RegistrationPresenter(EventBus eventBus) {
        setEventBus(eventBus);
    }

    /**
     * Method called during the creation of the controller
     * <p>
     * It initializes the validators via {@link ValidatorHelper} and the properties used in this class
     */
    public void initialize() {
        Platform.runLater(() -> root.requestFocus());
        root.setOnMousePressed(e -> root.requestFocus());
        initValidators();
    }

    /**
     * Gets called during initialization and initializes all validators for the presenter via {@link ValidatorHelper}.
     * Afterwards adds listeners to all fields with a validator by calling {@link #addFocusListener(TextInputControl)}..
     */
    private void initValidators() {
        ValidatorHelper.createRegexValidator(ProfilePresenter.USERNAME_PATTERN, nameField, "Fehler: Zwischen 4 und 16 Zeichen lang sein");
        ValidatorHelper.createRegexValidator(ProfilePresenter.PASSWORD_PATTERN, passwordField, "Fehler: Zwischen 4 und 16 Zeichen lang sein");
        ValidatorHelper.createRegexValidator(ProfilePresenter.EMAIL_PATTERN, emailField);
        //TODO: Fehler Nachrichten verbessern
        ValidatorHelper.createCompareFieldValidator("Passwörter müssen übereinstimmen", confirmPasswordField, passwordField);

        addFocusListener(nameField);
        addFocusListener(emailField);
        addFocusListener(passwordField);
        addFocusListener(confirmPasswordField);
    }


    /**
     * Adds a listener to the given field that gets called everytime the field gets/loses focus.
     * <p>
     * Validates the given field if the value of the {@link Node#focusedProperty() focusedProperty()} is false
     *
     * @param inputControl the input field that is being observed. It should implement {@link IFXLabelFloatControl}
     */
    private void addFocusListener(TextInputControl inputControl) {
        if (inputControl instanceof IFXLabelFloatControl) {
            inputControl.focusedProperty().addListener(
                    (observable, oldValue, newValue) -> {
                        if (Boolean.FALSE.equals(newValue)) {
                            ((IFXLabelFloatControl) inputControl).validate();
                        }
                    }
            );
        }
    }


    /**
     * Method called when the cancel button is pressed
     * <p>
     * This Method is called when the cancel button is pressed. It clears the text fields and posts an instance
     * of the RegistrationCanceledEvent to the EventBus the SceneManager is subscribed
     * to.
     *
     * @param event the ActionEvent generated by pressing the register button
     * @see de.uol.swp.client.register.event.RegistrationCanceledEvent
     * @see de.uol.swp.client.SceneManager
     * @since 2019-09-02
     */
    @FXML
    private void onCancelButtonPressed(ActionEvent event) {
        nameField.clear();
        emailField.clear();
        passwordField.clear();
        confirmPasswordField.clear();
        eventBus.post(REGISTRATION_CANCELED_EVENT);
    }

    /**
     * Method called when the register button is pressed
     * <p>
     * This Method is called when the register button is pressed.
     * If everything is filled in correctly the user service is requested to create
     * a new user.
     *
     * @see de.uol.swp.client.user.UserService
     */
    @FXML
    private void onRegisterButtonPressed() {
        if (nameField.validate() && emailField.validate() && passwordField.validate() && confirmPasswordField.validate()) {
            userService.createUser(new UserDTO(nameField.getText(), passwordField.getText(), emailField.getText()));
        }
    }
}
